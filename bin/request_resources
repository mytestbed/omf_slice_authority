#!/usr/bin/env ruby

# $0 --name foo200 -- simple_test.oedl --more a --foo xx@node -x

require "zlib"
require "json"
require 'optparse'
require 'base64'
require 'net/http'
require 'open-uri'
require 'uuid'

$verbose = false

slice_name = nil
user = nil
project = nil
role = nil
url = 'http://localhost:8006'

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] resourceFile"

  opts.on('-s', '--slice NAME', 'Name of slice' ) do |n|
    slice_name = n
  end

  opts.on('-u', '--user URN', "URN of requesting user" ) do |u|
    user = u
  end

  opts.on('', '--url URL', "URL for slice service [#{url}]" ) do |u|
    url = u
  end

  opts.on('-v', '--verbose', "Print more information about what's going on. [#{$verbose}]" ) do |url|
    $verbose = true
  end
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end
optparse.parse!

unless user
  puts "ERROR: Missing user\n"
  puts optparse
  abort
end
unless slice_name
  puts "ERROR: Missing slice name\n"
  puts optparse
  abort
end

# Next argument should be script file
unless ARGV.length == 1
  puts "ERROR: Missing resource file\n"
  puts optparse
  abort
end
graphFile = ARGV.shift
unless File.readable? graphFile
  puts "ERROR: Can't read graph file '#{graphFile}' - #{ARGV}"
  abort
end
gf = File.read(graphFile).strip
if gf[0] == '{'
  mime_type = 'application/gjson'
elsif gf[0] == '<'
  mime_type = 'text/xml'
else
  puts "ERROR: Can't figure out the type of content in '#{graphFile}'"
  abort
end

uri = URI.parse(url + '/users/' + user + '/slice_members/' + slice_name + '/slice/resources')

# OK, time ot post it
if $verbose
  puts "PUTing a request to '#{uri}'"
end

def make_request(uri, body, mime_type)
  req = Net::HTTP::Put.new(uri.path, {'Content-Type' => mime_type})
  #req.basic_auth @user, @pass
  req.body = body
  response = Net::HTTP.new(uri.host, uri.port).start {|http| http.request(req) }
  case Integer(response.code)
  when 504
    b = JSON.parse(response.body)
    delay = b['delay'] || 10
    delay = 10 if delay < 10
    puts ".. retry again in - #{delay}"
    sleep delay
    return make_request(uri, body, mime_type)

  when 302
    puts "RESPONSE>>>> #{response.inspect}"
  end
  puts "#{response.code} #{response.message}:\n#{response.body}"
end

make_request(uri, gf, mime_type)

